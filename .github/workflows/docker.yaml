name: Docker

on:
  push:

permissions:
  contents: read
  statuses: write

jobs:
  list-commits:
    runs-on: ubuntu-24.04-32
    outputs:
      commits: ${{ steps.save.outputs.commits }}
    steps:
      - name: List commits
        id: list
        uses: actions/github-script@v6
        env:
          ALL_COMMITS: ${{ toJSON(github.event.commits) }}
        with:
          script: |
            const commits = JSON.parse(process.env.ALL_COMMITS);
            return JSON.stringify(commits.map(commit => commit.id));
      - name: Save output
        id: save
        run: |
          echo "commits=${{ steps.list.outputs.result }}" >> $GITHUB_OUTPUT

  publish-status:
    needs: list-commits
    runs-on: ubuntu-24.04-32
    steps:
      - name: Publish status to all commits
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commits = JSON.parse('${{ needs.list-commits.outputs.commits }}');
            const state = 'success';
            const description = 'CI tests passed';

            for (const commit_sha of commits) {
              if (commit_sha) {
                await github.rest.repos.createCommitStatus({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: commit_sha,
                  state: state,
                  description: description,
                  context: 'CI Docker Workflow'
                });
              }
            }

  build:
    needs: list-commits
    name: ${{ matrix.commit == github.sha && format('build ({0}, {1}, {2})', matrix.CMAKE_BUILD_TYPE, matrix.compiler.CXX, matrix.compiler.CC) || format('build ({0}, {1}, {2}) - {3}', matrix.CMAKE_BUILD_TYPE, matrix.compiler.CXX, matrix.compiler.CC, matrix.commit) }}
    strategy:
      matrix:
        commit: ${{ fromJson(needs.list-commits.outputs.commits) }}
        CMAKE_BUILD_TYPE: [RelWithDebInfo, Debug]
        compiler: [{CXX: g++-15, CC: gcc-15}, {CXX: clang++-19, CC: clang-19}]

    runs-on: ubuntu-24.04-32

    steps:
      - name: Generate app token
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.REPO_READONLY_GITHUB_APP_ID }}
          private_key: ${{ secrets.REPO_READONLY_GITHUB_APP_KEY }}
          permissions: >-
            {"contents": "read"}

      - name: Tell git to do submodules in parallel
        run: |
           git config --global submodule.fetchJobs 8

      - name: Checkout specific commit
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.commit }}
          fetch-depth: 1 # This is the depth of commit, not submodule
          submodules: recursive
          token: ${{ steps.generate_token.outputs.token }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build `base` stage
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          ulimit: "memlock=-1:-1"
          target: base
          cache-from: type=gha,scope=base
          cache-to: type=gha,scope=base,mode=max

      - run: cat /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages
      - run: cat /sys/devices/system/node/node0/hugepages/hugepages-1048576kB/nr_hugepages
      - run: sudo bash -c "echo 2048 > /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages"
      - run: sudo bash -c "echo 8 > /sys/devices/system/node/node0/hugepages/hugepages-1048576kB/nr_hugepages"
      - run: cat /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages
      - run: cat /sys/devices/system/node/node0/hugepages/hugepages-1048576kB/nr_hugepages

      - name: Build `build_and_test` stage
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          build-args: |-
            CC=${{ matrix.compiler.CC }}
            CXX=${{ matrix.compiler.CXX }}
            CMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }}
          allow: security.insecure # for tests which use io_uring
          ulimit: "memlock=-1:-1"
          target: build_and_test
          cache-from: type=gha,scope=base
